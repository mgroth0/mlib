// Generated by CoffeeScript 2.5.1
var GET, GET_async, Key, LEFT_ARROW, QueryURL, RIGHT_ARROW, SPACE_BAR, _parse_ip, bool, center_str, forEachByTag, id, inner, just_email_href_stuff, keyup, log, merge, myIP, myIP_async, onload_funs, openFullscreen, path_join, tag, tap, wcGET, wcGET_async;

onload_funs = [];

window.onload = function() {
  return onload_funs.map(function(f) {
    return f();
  });
};

id = new Proxy({}, {
  get: function(target, name) {
    return $('#' + name)[0];
  }
});

tag = new Proxy({}, {
  get: function(target, name) {
    return $(name)[0];
  }
});

//noinspection JSUnusedGlobalSymbols
inner = new Proxy({}, {
  get: function(target, name) {
    return id[name].innerHTML;
  }
});

GET = function(url) {
  var Http;
  Http = new XMLHttpRequest();
  Http.open("GET", url, false); // 3rd param blocks, but this is deprecated
  Http.send();
  return Http.responseText;
};

GET_async = function(url, onResponse) {
  var Http;
  Http = new XMLHttpRequest();
  Http.open("GET", url);
  Http.send();
  return Http.onreadystatechange = function() {
    if (Http.readyState === 4) {
      if (Http.status === 200) {
        return onResponse(Http.responseText);
      } else {
        return alert(`bad HTTP request: url=${url},status=${Http.status},response=${Http.responseText}`);
      }
    }
  };
};

wcGET = function(url) {
  var t;
  t = "Unable to acquire kernel";
  while (t.includes("Unable to acquire kernel")) {
    t = GET(url);
  }
  return t;
};

wcGET_async = function(url, onResponse) {
  var t;
  t = "Unable to acquire kernel";
  return GET_async(url, function(t) {
    if (t.includes("Unable to acquire kernel")) {
      return wcGET_async(url, onResponse);
    } else {
      return onResponse(t);
    }
  });
};

Object.defineProperty(String.prototype, "de_quote", {
  value: function de_quote() {
        return this.substring(1, this.length - 1)
    },
  writable: true
});

//noinspection JSUnusedGlobalSymbols
forEachByTag = (tag, cb) => {
  return Array.from(document.getElementsByTagName(tag)).forEach(cb);
};

QueryURL = function(url, args_dict) {
  var j, k, keys, len;
  keys = Object.keys(args_dict);
  if (keys.length) {
    url = `${url}?`;
  }
  for (j = 0, len = keys.length; j < len; j++) {
    k = keys[j];
    url = `${url}${encodeURI(k)}=${encodeURI(args_dict[k])}&`;
  }
  if (keys.length > 1) {
    url = url.substring(0, url.length - 1);
  }
  return url;
};

Object.defineProperty(Element.prototype, "setText", {
  value: function(t) {
    switch (this.tagName) {
      case "P":
        return this.innerHTML = t;
      case "TEXTAREA":
        return this.value = t;
      default:
        throw `setText not coded for ${this.tagName}`;
    }
  },
  writable: true
});

Object.defineProperty(Element.prototype, "disappear", {
  value: function(just_hide) {
    if ((typeof just_display === "undefined" || just_display === null) || !just_display) {
      if (this.fade_timer != null) {
        clearInterval(this.fade_timer);
        this.fade_timer = null;
      }
      if (this.unfadetimer != null) {
        clearInterval(this.unfadetimer);
        this.unfadetimer = null;
      }
    }
    this.op = 0;
    if (this.style.display !== 'none') {
      this._default_display = getComputedStyle(this).display;
    }
    if ((just_hide != null) && just_hide) {
      return this.style.visibility = 'hidden';
    } else {
      return this.style.display = 'none';
    }
  },
  writable: true
});

Object.defineProperty(Element.prototype, "fade", {
  value: function(onFinish, just_hide) {
    if ((this.fade_timer == null) && this.style.display !== 'none' && this.style.visibility !== 'hidden') {
      if (this.unfadetimer != null) {
        clearInterval(this.unfadetimer);
        this.unfadetimer = null;
      } else {
        this.op = 1; // initial opacity
      }
      return this.fade_timer = setInterval(() => {
        if (this.op <= 0.01) {
          this.op = 0;
          clearInterval(this.fade_timer);
          if ((this.just_hide != null) && just_hide) {
            this.style.visibility = 'hidden';
          } else {
            this.disappear();
          }
          this.fade_timer = null;
          if (onFinish != null) {
            onFinish();
          }
        }
        return this.op -= Math.max(this.op * 0.1, 0);
      }, 50);
    } else {
      if (onFinish != null) {
        return onFinish();
      }
    }
  },
  writable: true
});

Object.defineProperty(Element.prototype, "appear", {
  value: function(just_display, but_hidden) {
    if ((just_display == null) || !just_display) {
      if (this.fade_timer != null) {
        clearInterval(this.fade_timer);
        this.fade_timer = null;
      }
      if (this.unfadetimer != null) {
        clearInterval(this.unfadetimer);
        this.unfadetimer = null;
      }
      this.op = 1;
    }
    if ((but_hidden != null) && but_hidden) {
      this.style.visibility = 'hidden';
    }
    if (this.style.display === 'none') {
      if (this.hasAttribute('data-display')) {
        return this.style.display = this.getAttribute('data-display');
      } else if (this._default_display) {
        return this.style.display = this._default_display;
      } else {
        return this.style.display = 'block';
      }
    }
  },
  writable: true
});

Object.defineProperty(Element.prototype, "unfade", {
  value: function(onFinish) {
    if ((this.unfadetimer == null) && ((this.fade_timer != null) || this.style.display === 'none' || this.style.visibility === 'hidden')) {
      if (this.fade_timer != null) {
        clearInterval(this.fade_timer);
        this.fade_timer = null;
      } else {
        this.op = 0; // initial opacity
      }
      this.appear(true);
      if (this.style.visibility === 'hidden') {
        this.style.visibility = 'visible';
      }
      return this.unfadetimer = setInterval(() => {
        if (this.op >= 1) {
          clearInterval(this.unfadetimer);
          this.unfadetimer = null;
          if (onFinish != null) {
            onFinish();
          }
        }
        return this.op += Math.max(Math.min(this.op * 0.1, 1), 0.01);
      }, 50);
    } else {
      if (onFinish != null) {
        return onFinish();
      }
    }
  },
  writable: true
});

Object.defineProperty(Element.prototype, "op", {
  get: function() {
    return Number(this.style.opacity);
  },
  set: function(op) {
    this.style.opacity = op;
    return this.style.filter = 'alpha(opacity=' + op * 100 + ")";
  }
});

// writable: true
Object.defineProperty(Element.prototype, "alternate", {
  value: function(htmls, period) {
    var alt_recurse, i;
    this._stop_alternating = false;
    i = 0;
    alt_recurse = () => {
      this.innerHTML = htmls[i];
      if (i === (htmls.length - 1)) {
        i = 0;
      } else {
        i++;
      }
      return setTimeout(() => {
        if (!this._stop_alternating) {
          return alt_recurse();
        }
      }, period);
    };
    return alt_recurse();
  },
  writable: true
});

Object.defineProperty(Element.prototype, "stop_alternating", {
  value: function() {
    return this._stop_alternating = true;
  },
  writable: true
});

Object.defineProperty(Element.prototype, "type", {
  value: function(ss, onFinish) {
    var i, j, ref, s;
    s = ss.charAt(0);
    for (i = j = 1, ref = ss.length - 1; (1 <= ref ? j <= ref : j >= ref); i = 1 <= ref ? ++j : --j) {
      if (ss.charAt(i) === ' ') {
        s = s + ' ';
      } else {
        s = s + '&nbsp';
      }
    }
    i = 0;
    return this.type_timer = setInterval(() => {
      this.innerHTML = s;
      if (i === ss.length - 1) {
        clearInterval(this.type_timer);
        if (onFinish != null) {
          onFinish();
        }
      }
      i += 1;
      if (s.substr(i, 5) === '&nbsp') {
        return s = s.substring(0, i) + ss.charAt(i) + s.substring(i + 5);
      } else {
        return s = s.substring(0, i) + ss.charAt(i) + s.substring(i + 1);
      }
    }, 20);
  },
  writable: true
});

path_join = function(...args) {
  return args.map(function(part, i) {
    if (i === 0) {
      return part.trim().replace(/[\/]*$/g, '');
    } else {
      return part.trim().replace(/(^[\/]*|[\/]*$)/g, '');
    }
  }).filter(function(x) {
    return x.length;
  }).join('/');
};

log = function(s) {
  return console.log(s);
};

bool = function(s) {
  return JSON.parse(s.toLowerCase());
};

keyup = function(f) {
  return $(document).keyup(function(e) {
    log(`${e.key} pressed`);
    return f(e);
  });
};

Key = function(keyCode, str) {
  return {keyCode, str};
};

SPACE_BAR = Key(32, "Space Bar");

RIGHT_ARROW = Key(39, "Right Arrow Key");

LEFT_ARROW = Key(37, "Left Arrow Key");

//noinspection JSUnusedGlobalSymbols
just_email_href_stuff = function() {};

//  id.link.href = "#{id.link.href}body=#{encodeURI(template)}"
openFullscreen = function(DOM_e) {
  if (DOM_e.requestFullscreen) {
    return DOM_e.requestFullscreen();
  } else if (DOM_e.mozRequestFullScreen) { ///* Firefox */
    return DOM_e.mozRequestFullScreen();
  } else if (DOM_e.webkitRequestFullscreen) { ///* Chrome, Safari and Opera */
    return DOM_e.webkitRequestFullscreen();
  } else if (DOM_e.msRequestFullscreen) { ///* IE/Edge */
    return DOM_e.msRequestFullscreen();
  }
};

tap = function(o, fn) {
  fn(o);
  return o;
};

merge = function(...xs) {
  if ((xs != null ? xs.length : void 0) > 0) {
    return tap({}, function(m) {
      var j, k, len, results, v, x;
      results = [];
      for (j = 0, len = xs.length; j < len; j++) {
        x = xs[j];
        results.push((function() {
          var results1;
          results1 = [];
          for (k in x) {
            v = x[k];
            results1.push(m[k] = v);
          }
          return results1;
        })());
      }
      return results;
    });
  }
};

//ipapi doesnt allow CORS
//myIP = ->
//    JSON.parse(GET('https://ipapi.co/json/')).ip
//myIP_async = (handler) ->
//    GET_async('https://ipapi.co/json/',(t)->
//        handler(JSON.parse(t).ip)
//    )
_parse_ip = function(raw) {
  return raw.split('\n').filter(function(l) {
    return l.startsWith('ip');
  })[0].replace('ip=', '');
};

myIP = function() {
  return _parse_ip(GET('https://www.cloudflare.com/cdn-cgi/trace'));
};

myIP_async = function(handler) {
  return GET_async('https://www.cloudflare.com/cdn-cgi/trace', function(t) {
    return handler(_parse_ip(t));
  });
};

center_str = function(str, marker) {
  var mi;
  mi = str.indexOf(marker) + 1;
  while (mi < (str.length / 2 + 0.5)) {
    str = '&nbsp' + str;
    mi = str.indexOf(marker) + 1;
  }
  while (mi > (str.length / 2 + 0.5)) {
    str = str + '&nbsp';
    mi = str.indexOf(marker) + 1;
  }
  if (str.length % 2 === 0) {
    return str.replace(marker, '&nbsp');
  } else {
    return str.replace(marker, '');
  }
};

//# sourceMappingURL=mlib.js.map
