{
  "version": 3,
  "file": "signal_manscan.js",
  "sourceRoot": "../../../hep",
  "sources": [
    "../mlib/mlib/web/signal_manscan.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#appendToBody(E.P('hola from signal_manscan.coffee'))\n\necg_plt = () -> plot_map[Object.keys(plot_map).find((e)->e.includes('ECG'))]\nibi_plt = () -> plot_map[Object.keys(plot_map).find((e)->e.includes('IBI'))]\n\npendingUpdate = null\nrequestedUpdate = false\n\npointerArrow = () ->\n    x        : 0.5\n    y        : 0.5\n    yanchor  : 'middle'\n    ax       : 0\n    ay       : -200\n    axref    : 'paper'\n    xref     : 'paper'\n    yref     : 'paper'\n    text     : 'pointer'\n    showarrow: true\n    arrowhead: 1\n\nlast_message_id = 0\ncurrent_annos = []\nws = openSocketClient({\n    url      : \"ws://localhost:9998\"\n    onopen   : () ->\n        @.send(\"GET_ALL\")\n        log(\"Sent message GET_ALL...\")\n    onmessage: (evt) ->\n        data = JSON.parse(evt.data)\n        log(\"Message #{data.id} is received... (#{evt.data.shorten(50)})\")\n        if last_message_id >= data.id\n            log('    ... it was a duplicate')\n            return\n        last_message_id = data.id\n        if data.type == 'TEXT'\n            appendToBody(E.Pre(evt.data.afterFirst(':')))\n        else if data.type == 'HTML' or data.type == 'PLOT'\n            div = E.Div(data.value)\n            appendToBody(div)\n            arr = div.getElementsByTagName('script')\n            for a in arr\n                eval(a.innerHTML) # run script inside div\n            if data.type == 'PLOT' #after ran script\n                dv = div.children[0].children[0]\n                dv = mplotly(dv)\n                plot_map[dv._fullLayout.title.text] = dv\n                if dv == ecg_plt()\n                    dv.def {\n                        x: () -> @._fullData[0].x\n                        y: () -> @._fullData[0].y\n                    }\n                    current_annos = ecg_plt()._fullLayout.annotations\n                    Plotly.relayout(ecg_plt(), {\n                        'annotations': current_annos.concat([pointerArrow()])\n                    })\n                    Y_FACTOR = 5\n                    yrange_down_button = E.button('y_range -')\n                    yrange_down_button.onclick = ->\n                        ecg_plt().animate(\n                            newYrange: ecg_plt()._fullLayout.yaxis.range.map((e)->\n                                e / Y_FACTOR\n                            )\n                        )\n                    yrange_up_button = E.button('y_range +')\n                    yrange_up_button.onclick = ->\n                        ecg_plt().animate(\n                            newYrange: ecg_plt()._fullLayout.yaxis.range.map((e)->\n                                e * Y_FACTOR\n                            )\n                        )\n                    div.appendChild(yrange_down_button)\n                    div.appendChild(yrange_up_button)\n\n                    xrange_down_button = E.button('x_range -')\n                    xrange_down_button.onclick = ->\n                        x_range = ecg_plt()._fullLayout.xaxis.range\n                        if x_range[1] - x_range[0] <= 2\n                            return\n                        x_range[0] += 1\n                        x_range[1] -= 1\n                        ecg_plt().animate(\n                            newXrange: x_range\n                        )\n                    xrange_up_button = E.button('x_range +')\n                    xrange_up_button.onclick = ->\n                        x_range = ecg_plt()._fullLayout.xaxis.range\n                        if x_range[1] - x_range[0]  >= 10\n                            return\n                        x_range[0] -= 1\n                        x_range[1] += 1\n                        ecg_plt().animate(\n                            newXrange: x_range\n                        )\n                    div.appendChild(xrange_down_button)\n                    div.appendChild(xrange_up_button)\n\n        else if data.type == 'BUTTON'\n            template = document.createElement('template')\n            template.innerHTML = data.html\n            button = template.content.firstChild\n            button.onclick = =>\n                log(\"clicked button #{name}\")\n                result = JSON.stringify\n                    name : button.innerHTML\n                    state:\n                        pointer: pointer\n                @.send(\"BUTTON:#{result}\")\n            appendToBody(button)\n\n\n        else if data.type == 'UPDATE'\n            requestedUpdate = false\n            u = JSON.parse(data.value)\n            if u?\n                if isShifting\n                    pendingUpdate = u\n                else\n                    update(u)\n        else\n#            err('unknown data type: ')\n            appendToBody(E.Div(data))\n    onclose  : ->\n        alert(\"Connection is closed...\")\n})\npointer = 0\npointerL = null\nstopShifting = false\nisShifting = false\n\nincrement = 1 / 100\n\nkeydown (e) ->\n    if e.keyCode == SPACE_BAR.keyCode\n        1 + 1\n    else if [LEFT_ARROW.keyCode, RIGHT_ARROW.keyCode].includes(e.keyCode)\n        if not isShifting\n            retic()\n            log('finished retic')\n            inc = 1\n            if e.keyCode == LEFT_ARROW.keyCode\n                inc = -1\n            stopShifting = false\n            shift(inc)\n    else if [UP_ARROW.keyCode, DOWN_ARROW.keyCode].includes(e.keyCode)\n        if e.keyCode == UP_ARROW.keyCode\n            increment *= 10\n        else\n            increment /= 10\nkeyup (e) ->\n    if [LEFT_ARROW.keyCode, RIGHT_ARROW.keyCode].includes(e.keyCode)\n        stopShifting = true\n\n\n\nDUR = 10\nRELOAD_THRESH = 0.25\n\nwindowRect = null\n\nupdate_callback = null\nnewStart = null\nnewStop = null\n\n\ncurrent_arrow = null\n\nfixArrow = ({refresh} = {}) ->\n    refresh ?= false\n    arrow = pointerArrow()\n    arrow.yref = 'y'\n    if refresh or newStart == -1 # happens after going really fast and updating\n#        setTimeout(->\n        [newXrange, newYRange, newPointer, pointerLine, windowRect, newStart, newStop] = inc_calcs(ecg_plt(), 0)\n    #            fixArrow()\n    #        , 3000)\n    #        new Promise(->)\n    #    else\n    y = ecg_plt().y().slice(newStart, newStop) #bc at edges pointer is not at center\n    newy = y[Math.round(y.length / 2)]\n#    log(\"setting new y to #{newy}\")\n    arrow.y = newy\n    #    ecg_plt().animate(\n    #        newAnnotations: [arrow]\n    #        dur         : 10\n    #    )\n    current_arrow = arrow\n    Plotly.relayout(ecg_plt(), {\n        'annotations': current_annos.concat([arrow])\n    })\n#fixArrow = log_invokation fixArrow\n\n\nshift = (pos) ->\n    isShifting = true\n    inc = increment * pos\n    log('about to call inc_calcs')\n    [newXrange, newYRange, newPointer, pointerLine, windowRect, newStart, newStop] = inc_calcs(ecg_plt(), inc)\n    log('finished inc_calcs')\n    pointer = newPointer\n    pointerL = pointerLine\n    update_check = ({stack} = {}) ->\n        stack ?= false\n        x = ecg_plt().x()\n        x0 = x[0]\n        xEnd = x.slice(-1)[0]\n        dif = xEnd - x0\n        if !pendingUpdate? and (not requestedUpdate) and (pointer > x0 + (dif * (.5 + RELOAD_THRESH)) or pointer < x0 + (dif * (.5 - RELOAD_THRESH)))\n            ws.send(\"GET_UPDATE:#{pointer}\")\n            requestedUpdate = true\n        else if stack\n            update_callback = ->\n                ws.send(\"GET_UPDATE:#{pointer}\")\n                requestedUpdate = true\n    update_check = log_invokation update_check\n    checkUp = ->\n        if stopShifting\n            log('stopShifting!')\n            #            fixArrow()\n            update_check(\n                stack: true\n            )\n            isShifting = false\n        fixArrow()\n    checkUp = log_invokation checkUp\n    log('starting main shift')\n    ecg_plt().animate(\n#        data_changes: [[2, pointerLine]] #maybe\n        newXrange: newXrange\n#                    newYRange: newYRange\\\n        dur      : DUR\n        redraw   : false\n    ).then((v)->\n        log('finished main shift, checking if should update')\n        update_check()\n        log('finished checking if should update')\n    ).then((v)->\n        log('in next then (why another?)')\n        if pendingUpdate?\n            update(pendingUpdate)\n    ).then((v) ->\n        log('in final then')\n        checkUp().then(->\n            if not stopShifting\n                shift(pos)\n        )\n    ).catch(checkUp)\nshift = log_invokation shift\n\n\nupdate = (u) ->\n#            ibi_plt has nothing to do with pending update. Its just that it doesnt need to update that often, so this is a way to save resources and its roughly the update frequency that I want\n    data = u.data\n    current_annos = u.annotations\n    ibi_plt().animate\n        data_changes: [[1, windowRect]]\n    the_update =\n        data_changes  : [\n            [0, data[0]],\n            [1, data[1]],\n            [2, data[2]]\n        ]\n        newAnnotations: current_annos.concat([current_arrow])\n        dur: 1\n    if u.yrange?\n        the_update = merge(the_update, {newYrange: u.yrange})\n    ecg_plt().animate(the_update).then((v)->\n        fixArrow({refresh: true})\n        pendingUpdate = null\n        if update_callback?\n            update_callback()\n            update_callback = null\n    ).catch((r)->\n        fixArrow({refresh: true})\n        pendingUpdate = null\n        if update_callback?\n            update_callback()\n            update_callback = null\n    )\nupdate = log_invokation update"
  ]
}